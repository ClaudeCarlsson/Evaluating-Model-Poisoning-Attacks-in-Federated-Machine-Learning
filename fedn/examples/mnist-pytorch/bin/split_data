#!./.mnist-pytorch/bin/python
import os
from math import floor
import fire
import torch
import torchvision

def splitset(dataset, targets, parts):
    n = len(dataset)
    local_n = floor(n / parts)
    result_data = []
    result_targets = []
    for _ in range(parts):
        # Sample with replacement (Array of length local_n with ints ranging from 0 to n)
        indices = torch.randint(0, n, (local_n,))
        result_data.append(dataset[indices])
        result_targets.append(targets[indices])
    return result_data, result_targets

def split(out_dir='data', n_splits=2):
    # Make dir
    if not os.path.exists(f'{out_dir}/clients'):
        os.mkdir(f'{out_dir}/clients')

    # Load data
    train_data = torchvision.datasets.MNIST(
        root=f'{out_dir}/train', transform=torchvision.transforms.ToTensor, train=True)
    test_data = torchvision.datasets.MNIST(
        root=f'{out_dir}/test', transform=torchvision.transforms.ToTensor, train=False)

    # Convert to dict with splits that sample with replacement
    x_train, y_train = splitset(train_data.data, train_data.targets, n_splits)
    x_test, y_test = splitset(test_data.data, test_data.targets, n_splits)

    data = {
        'x_train': x_train,
        'y_train': y_train,
        'x_test': x_test,
        'y_test': y_test,
    }

    # Make splits
    for i in range(n_splits):
        subdir = f'{out_dir}/clients/{str(i+1)}'
        if not os.path.exists(subdir):
            os.mkdir(subdir)
        torch.save({
            'x_train': data['x_train'][i],
            'y_train': data['y_train'][i],
            'x_test': data['x_test'][i],
            'y_test': data['y_test'][i],
        },
            f'{subdir}/mnist.pt')

if __name__ == '__main__':
    fire.Fire(split)
